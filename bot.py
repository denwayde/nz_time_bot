import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.exceptions import BotBlocked
from config_reader import config
from db import delete_or_insert_data as di_d, select_data, insert_many
import requests
from datetime import datetime as dt, timedelta
import json
import pytz
import re
import asyncio
import aioschedule
import random


class SetConfigsToBot(StatesGroup):
    waiting_for_choose_country = State()
    waiting_for_choose_city = State()
    waiting_for_choose_mazhab = State()
    waiting_for_choose_delta_time = State()
    waiting_for_send_message_to_admin = State()
    waiting_for_send_message_to_all = State()


API_TOKEN = config.bot_token.get_secret_value()

# Configure logging
logging.basicConfig(level=logging.INFO)
memstore = MemoryStorage()
# Initialize bot and dispatcher
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=memstore)

nz_times_names = ["–£—Ç—Ä–µ–Ω–Ω–∏–π", "–û–±–µ–¥–µ–Ω–Ω—ã–π", "–ü–æ—Å–ª–µ–æ–±–µ–¥–µ–Ω–Ω—ã–π", "–í–µ—á–µ—Ä–Ω–∏–π", "–ù–æ—á–Ω–æ–π"]


@dp.message_handler(commands='start', state="*")
async def send_welcome(message: types.Message, state: FSMContext):
    user_exist = select_data("select*from users where telega_id = ?", (message.chat.id, ))
    if user_exist == []:
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —ç—Ç–æ—Ç –±–æ—Ç –Ω–∞–ø–æ–º–Ω–∏—Ç –≤–∞–º –æ —á—Ç–µ–Ω–∏–∏ –Ω–∞–º–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å —Ö–∞–¥–∏—Å–æ–º.\n–î–∞–≤–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ.\n\nPS: –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è")
        await bot.delete_message(message.chat.id, message["message_id"])
        await state.set_state(SetConfigsToBot.waiting_for_choose_country.state)
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", ]
        keyboard.add(*buttons)
        await message.answer("–í—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞", reply_markup=keyboard)
        await bot.delete_message(message.chat.id, message["message_id"])


@dp.message_handler(state=SetConfigsToBot.waiting_for_choose_country)
async def choosen_country_handler(message: types.Message, state: FSMContext):
    await state.update_data(chosen_country=message.text)
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç—Ä–∞–Ω—É {message.text}.\n–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –í—ã –∂–∏–≤–µ—Ç–µ.")
    await bot.delete_message(message.chat.id, message["message_id"])
    await state.set_state(SetConfigsToBot.waiting_for_choose_city.state)


@dp.message_handler(state=SetConfigsToBot.waiting_for_choose_city)
async def choosen_city_handler(message: types.Message, state: FSMContext):
    
    btns = [
        types.InlineKeyboardButton(text='–•–∞–Ω–∞—Ñ–∏', callback_data='hanafi'),
        types.InlineKeyboardButton(text='–®–∞—Ñ–∏–∏', callback_data='shafii')
    ]
    keyb = types.InlineKeyboardMarkup(row_width=2)
    keyb.add(*btns)
    await state.update_data(chosen_city=message.text)
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥ {message.text}.\n–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –º–∞–∑—Ö–∞–±, –∫–æ—Ç–æ—Ä–æ–º—É –í—ã —Å–ª–µ–¥—É–µ—Ç–µ.", reply_markup=keyb)
    await bot.delete_message(message.chat.id, message["message_id"])
    await state.set_state(SetConfigsToBot.waiting_for_choose_mazhab.state)
    # user_data = await state.get_data()
    # await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥ {message.text} –∏ —Å—Ç—Ä–∞–Ω—É {user_data['chosen_country']}")
    # await state.finish()




async def choosen_mazhab_handler(call, state, message_data):
    btns = [
        types.InlineKeyboardButton(text='–ó–∞ –ø–æ–ª—á–∞—Å–∞ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è', callback_data='-30'),
        types.InlineKeyboardButton(text='–° –∑–∞—Ö–æ–¥–æ–º', callback_data='0'),
        types.InlineKeyboardButton(text='–ó–∞ —á–∞—Å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è', callback_data='-60')
    ]
    keyb = types.InlineKeyboardMarkup(row_width=3)
    keyb.add(*btns)
    await state.update_data(chosen_mazhab=message_data)
    await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞–∑—Ö–∞–± {message_data}. –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –¥–ª—è –í–∞—Å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –Ω–∞–º–∞–∑–∞", reply_markup=keyb)
    await bot.delete_message(call.message.chat.id, call.message["message_id"])
    await bot.answer_callback_query(callback_query_id=call.id)
    await state.set_state(SetConfigsToBot.waiting_for_choose_delta_time.state)




@dp.callback_query_handler(lambda call: call.data == 'hanafi', state=SetConfigsToBot.waiting_for_choose_mazhab)
async def choose_hanafi_handler(call: types.CallbackQuery, state: FSMContext):  #esli vibrali hanafi
    await choosen_mazhab_handler(call, state, "–•–∞–Ω–∞—Ñ–∏")



@dp.callback_query_handler(lambda call: call.data == 'shafii', state=SetConfigsToBot.waiting_for_choose_mazhab)
async def choose_shafii_handler(call: types.CallbackQuery, state: FSMContext):  #esli vibrali –®–∞—Ñ–∏–∏
    await choosen_mazhab_handler(call, state, "–®–∞—Ñ–∏–∏")



async def choose_delta_minutes_and_save_settings(call, state, delta_time):
    #reply_markup = types.ReplyKeyboardRemove()
    await state.update_data(chosen_delta=delta_time)
    user_data = await state.get_data()

    mazh = 1
    if user_data['chosen_mazhab'] == "–®–∞—Ñ–∏–∏":
        mazh = 0

    di_d("delete from users where telega_id=?",(call.message.chat.id, ))
    di_d("delete from user_timings where telega_id=?",(call.message.chat.id, ))

    di_d("insert into users(telega_id, name, country, city, mazhab, time_delta, nz_times_with_hadis) values(?,?,?,?,?,?, ?);", (call.message.chat.id, call.message.chat.username, user_data['chosen_country'], user_data['chosen_city'], mazh, int(delta_time), json.dumps(nz_times_names, ensure_ascii=False).encode("utf-8"), ))
    resp = requests.get(
        f"http://api.aladhan.com/v1/calendarByCity/{dt.now().date().year}/{dt.now().date().month}?city={user_data['chosen_city']}&country={user_data['chosen_country']}&method=14&school={mazh}")
    
    if resp.json()['code'] == 200:
        await correct_timings_insertor(call.message.chat.id, resp)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = ["–í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", ]
        keyboard.add(*buttons)
        await call.message.answer(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –≤ —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.\n–ï—Å–ª–∏ –í—ã –ø–µ—Ä–µ–¥—É–º–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /delete_user –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞. –ï—Å–ª–∏ –í—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–Ω–µ–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /change_settings. –ï—Å–ª–∏ –í—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å —Ö–∞–¥–∏—Å –∏–∑ –∫–∞–∫–æ–≥–æ –ª–∏–±–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /del_hadis_from_time. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /send_message_to_admin. –≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –µ—Å—Ç—å –≤ –º–µ–Ω—é —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–ª–µ–≤–∞ –æ—Ç –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–∏–Ω—è—è –∫–Ω–æ–ø–∫–∞). \n–í –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è –±–æ—Ç –∏–Ω—à–ê–ª–ª–∞ –ø—Ä–∏—à–ª–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ. \nüïå –ú–∏—Ä –í–∞–º üïå", reply_markup=keyboard)

    else:
        await call.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –æ–ø–µ—á–∞—Ç–∞–ª–∏—Å—å –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å–≤–æ–µ–π —Å—Ç—Ä–∞–Ω—ã –∏–ª–∏ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ–¥—É—Ä—É –Ω–∞—Ç—Ä–æ–π–∫–∏, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /start.")
    await bot.delete_message(call.message.chat.id, call.message["message_id"])
    await state.finish()


@dp.callback_query_handler(lambda call: call.data == '-30', state=SetConfigsToBot.waiting_for_choose_delta_time)
async def choose_delta_thirty(call: types.CallbackQuery, state: FSMContext):  #konec nastroek
    await choose_delta_minutes_and_save_settings(call, state, '-30')

@dp.callback_query_handler(lambda call: call.data == '0', state=SetConfigsToBot.waiting_for_choose_delta_time)
async def choose_delta_zero(call: types.CallbackQuery, state: FSMContext):  #konec nastroek
    await choose_delta_minutes_and_save_settings(call, state, '0')

@dp.callback_query_handler(lambda call: call.data == '-60', state=SetConfigsToBot.waiting_for_choose_delta_time)
async def choose_delta_sexty(call: types.CallbackQuery, state: FSMContext):  #konec nastroek
    await choose_delta_minutes_and_save_settings(call, state, '-60')



@dp.message_handler(commands=['delete_user'])
async def delete_user(message: types.Message,  state: FSMContext):
    user = select_data("select*from users where telega_id = ?", (message.chat.id, ))
    if user != []:
        di_d("delete from users where telega_id = ?",(message.chat.id, ))
        di_d("delete from user_timings where telega_id = ?",(message.chat.id, ))
        await bot.send_message(message.chat.id, "–í—ã —É–¥–∞–ª–∏–ª–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞.\n–ë–æ–ª—å—à–µ –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –í–∞–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –ï—Å–ª–∏ –í—ã –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /start.\nüïå –ú–∏—Ä –í–∞–º üïå")
    else:
        await bot.send_message(message.chat.id, "–í—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /start.")
    await state.finish()


@dp.message_handler(commands=['change_settings'],  state="*")
async def change_settings(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –≤ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ.\n\nPS:–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è.")
    await state.set_state(SetConfigsToBot.waiting_for_choose_country.state)    


async def set_hadis_to_time(message, nz_time_arr): 
    keyb = types.InlineKeyboardMarkup(row_width=3)
    # ["–£—Ç—Ä–µ–Ω–Ω–∏–π", "–û–±–µ–¥–µ–Ω–Ω—ã–π", "–ü–æ—Å–ª–µ–æ–±–µ–¥–µ–Ω–Ω—ã–π", "–í–µ—á–µ—Ä–Ω–∏–π", "–ù–æ—á–Ω–æ–π"]
    nz_times_list = nz_time_arr
    if nz_times_list == []:
        await bot.delete_message(message.chat.id, message.message_id)  
        await bot.send_message(message.chat.id, "–ù–∏ –≤ –æ–¥–Ω–æ –∏–∑ –≤—Ä–µ–º–µ–Ω –Ω–∞–º–∞–∑–∞ –í–∞–º —Ö–∞–¥–∏—Å –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ö–∞–¥–∏—Å –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /set_hadis_to_time")
    else:
        btns = []
        for x in nz_times_list:  
            btns.append(types.InlineKeyboardButton(text=x, callback_data=f'without_{x}'))
        keyb.add(*btns)
        commands_options = [
            types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data=f"otmena_{message.message_id}"),
            types.InlineKeyboardButton(text="üíæ–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save_{message.message_id}")
        ]
        keyb.row(*commands_options)
        await bot.delete_message(message.chat.id, message.message_id)  
        await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–∞ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ë–ï–ó —Ö–∞–¥–∏—Å–∞", reply_markup=keyb)




def nz_names_from_usr_bd_for_text(id):
    nz_names_from_user = json.loads(select_data("select nz_times_with_hadis from users where telega_id = ?", (id, ))[0][0])
    #print(nz_names_from_user[len(nz_names_from_user)-1])
    nz_names_text = ''
    for x in nz_names_from_user:
        if nz_names_from_user.index(x) != len(nz_names_from_user)-1:
            nz_names_text = nz_names_text+x + "," +" "
        else:
            nz_names_text = nz_names_text+x
    return nz_names_text

async def save_and_close(call, state, mes): #–°–û–•–†–ê–ù–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ï 
    await bot.send_message(call.message.chat.id, mes)
    await state.finish()
    await bot.delete_message(call.message.chat.id, call.message.message_id)
    await bot.answer_callback_query(callback_query_id=call.id)

@dp.callback_query_handler(lambda call: re.fullmatch(r'save\_[0-9]+', call.data), state="*")
async def save_for_nz_without_hadis(call: types.CallbackQuery, state: FSMContext, ):
    await save_and_close(call, state, f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ë–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ö–∞–¥–∏—Å—ã –ø—Ä–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –æ —Å–ª–µ–¥—É—é—â–∏—Ö –Ω–∞–º–∞–∑–∞—Ö: {nz_names_from_usr_bd_for_text(call.message.chat.id)}")

@dp.callback_query_handler(lambda call: re.fullmatch(r'otmena\_[0-9]+', call.data), state="*")  # –û–¢–ú–ï–ù–ê –°–û–û–ë–©–ï–ù–ò–Ø
async def otmena(call: types.CallbackQuery, state: FSMContext):
    msg_id_del = call.data.split('_')[1]
    await bot.delete_message(call.message.chat.id, int(msg_id_del) + 1)
    await state.finish()
    await bot.answer_callback_query(callback_query_id=call.id)
    


@dp.callback_query_handler(lambda call: re.fullmatch(r'without\_([–ê-–Ø–∞-—è]+)', call.data))
async def remove_nz_name(call: types.CallbackQuery):  #—É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–º–∞–∑–æ–º —Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–∞–¥–∏—Å –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–µ –±—É–¥–µ—Ç
    nz_wich_will_be_deleted = call.data.split('_')[1]
    nz_arr = select_data("select nz_times_with_hadis from users where telega_id = ?", (call.message.chat.id, ))
    nz_local = json.loads(nz_arr[0][0])
    nz_local.remove(nz_wich_will_be_deleted)
    #di_d("insert into users(nz_times_with_hadis) values(?)", (json.dumps(nz_local, ensure_ascii=False).encode("utf-8"), ))
    di_d("update users set nz_times_with_hadis = ? where telega_id = ?", (json.dumps(nz_local, ensure_ascii=False).encode("utf-8"), call.message.chat.id, ))
    await set_hadis_to_time(call.message, nz_local)
    await bot.answer_callback_query(callback_query_id=call.id)


@dp.message_handler(commands=["del_hadis_from_time"])
async def dhadis_to_time(message: types.Message):
    nz_arr = select_data("select nz_times_with_hadis from users where telega_id = ?", (message.chat.id, ))
    await set_hadis_to_time(message, json.loads(nz_arr[0][0]))


@dp.message_handler(commands=["set_hadis_to_time"])
async def shadis_to_time(message: types.Message):
    nz_arr = select_data("select nz_times_with_hadis from users where telega_id = ?", (message.chat.id, ))
    await insept_hadis_to_time(message, json.loads(nz_arr[0][0]))


async def insept_hadis_to_time(message, nz_time_arr):
    #global nz_times_names 
    sootvetstvie = 0
    keyb = types.InlineKeyboardMarkup(row_width=3)

    nz_times_names = ["–£—Ç—Ä–µ–Ω–Ω–∏–π", "–û–±–µ–¥–µ–Ω–Ω—ã–π", "–ü–æ—Å–ª–µ–æ–±–µ–¥–µ–Ω–Ω—ã–π", "–í–µ—á–µ—Ä–Ω–∏–π", "–ù–æ—á–Ω–æ–π"]
    nz_times_list = nz_time_arr
    btns = []
    for x in nz_times_list:
        if x in nz_times_names:
            sootvetstvie = sootvetstvie +1
            nz_times_names.remove(x)
    
    if sootvetstvie == 5:
        await bot.delete_message(message.chat.id, message.message_id)  
        await bot.send_message(message.chat.id, "–•–∞–¥–∏—Å—ã –í–∞–º –ø—Ä–∏—Ö–æ–¥—è—Ç –≤–æ –≤—Å–µ—Ö –ø—è—Ç–∏ –≤—Ä–µ–º–µ–Ω–∞—Ö –Ω–∞–º–∞–∑–∞. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å —Ö–∞–¥–∏—Å –∏–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /del_hadis_from_time")
    else:
        for z in nz_times_names:
            btns.append(types.InlineKeyboardButton(text=z, callback_data=f'with_{z}'))
        keyb.add(*btns)
        commands_options = [
            types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data=f"otmena_{message.message_id}"),
            types.InlineKeyboardButton(text="üíæ–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save_{message.message_id}"),
        ]
        keyb.row(*commands_options)
        await bot.delete_message(message.chat.id, message.message_id)  
        await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–∞ –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –í–ú–ï–°–¢–ï –° —Ö–∞–¥–∏—Å–æ–º", reply_markup=keyb)


@dp.callback_query_handler(lambda call: re.fullmatch(r'with\_([–ê-–Ø–∞-—è]+)', call.data))
async def remove_nz_name(call: types.CallbackQuery):  #—É–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–º–∞–∑–æ–º —Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–∞–¥–∏—Å –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–µ –±—É–¥–µ—Ç
    nz_wich_will_be_added = call.data.split('_')[1]
    nz_arr = select_data("select nz_times_with_hadis from users where telega_id = ?", (call.message.chat.id, ))
    nz_local = json.loads(nz_arr[0][0])
    nz_local.append(nz_wich_will_be_added)
    #di_d("insert into users(nz_times_with_hadis) values(?)", (json.dumps(nz_local, ensure_ascii=False).encode("utf-8"), ))
    di_d("update users set nz_times_with_hadis = ? where telega_id = ?", (json.dumps(nz_local, ensure_ascii=False).encode("utf-8"), call.message.chat.id, ))
    await insept_hadis_to_time(call.message, nz_local)
    await bot.answer_callback_query(callback_query_id=call.id)

#–û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –ê–î–ú–ò–ù–£
@dp.message_handler(commands=["send_message_to_admin"], state="*")
async def message_init(message: types.Message, state:FSMContext):
    keyb = types.InlineKeyboardMarkup(row_width=3)
    otmena = [types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data=f"otmena_{message.message_id}"), ]
    keyb.add(*otmena)
    # commands_options = [
    #     types.InlineKeyboardButton(text="‚ùå–û—Ç–º–µ–Ω–∞", callback_data=f"otmena_{message.message_id}"),
    #     types.InlineKeyboardButton(text="üíæ–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save_{message.message_id}"),
    # ]
    # keyb.row(*commands_options)
    await bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ email –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.", reply_markup=keyb)
    await state.set_state(SetConfigsToBot.waiting_for_send_message_to_admin.state)

@dp.message_handler(state=SetConfigsToBot.waiting_for_send_message_to_admin)
async def send_message_to_admin(message: types.Message, state: FSMContext):
    await state.update_data(mes = message.text)
    user_message = await state.get_data()
    if len(user_message['mes']) >= 6:
        chat_id = message.chat.id
        button_url = f'tg://openmessage?user_id={chat_id}'
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(text="Open user", url=button_url))
        await bot.send_message(1949640271, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username if message.from_user.username!=None else message.chat.id}\n{user_message['mes']}", reply_markup=markup)
        await bot.send_message(message.chat.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    else:
        await bot.send_message(message.chat.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É: –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /send_message_to_admin")
    await state.finish()
#–û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –ê–î–ú–ò–ù–£


#–ü–†–û–°–ú–û–¢–† –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
@dp.message_handler(commands=["users"])
async def show_all_users(message: types.Message):
    if message.chat.id == 1949640271:
        users_arr = select_data("select*from users")
        txt = ''
        num = 0
        for x in users_arr:
            num = num + 1
            txt = txt+ str(num)+') ' + str(x[1]) + ' ' + str(x[2])+ ' '+str(x[3])+' '+str(x[4])+'\n'
        await bot.send_message(message.chat.id, txt)
    else:
        await bot.send_message(message.chat.id, '))))')
#–ü–†–û–°–ú–û–¢–† –í–°–ï–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô



#–û–¢–ü–†–ê–í–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï –í–°–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú
@dp.message_handler(commands=["send_all"], state="*")
async def send_message_from_admin_init(message: types.Message, state: FSMContext):
    if message.chat.id == 1949640271:
        await bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
        await state.set_state(SetConfigsToBot.waiting_for_send_message_to_all.state)
    else:
        await bot.send_message(message.chat.id, ")))))")

@dp.message_handler(state=SetConfigsToBot.waiting_for_send_message_to_all)
async def send_message_from_admin(message: types.Message, state: FSMContext):
    await state.update_data(mes = message.text)
    admin_message = await state.get_data()
    users_arr = select_data("select*from users")
    for x in users_arr:
        try:
            rand_second_for_sleep = random.randint(1, 10)
            await asyncio.sleep(rand_second_for_sleep)#pered otpravkoi pust zasnet        
            await bot.send_message(x[1], admin_message['mes'])
        except BotBlocked:
            print(f"–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —é–∑–µ—Ä–æ–º {x[1]} —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
            await asyncio.sleep(1)
    state.finish()
#–û–¢–ü–†–ê–í–ò–¢–¨ –°–û–û–ë–©–ï–ù–ò–ï –í–°–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú




async def send_all_timings(city, telega_id, my_arr, message_obj):
    timings_in_arr_form = my_arr
    msg = f'<b>{city.capitalize()}. –°–µ–≥–æ–¥–Ω—è: {dt.now().strftime("%d/%m/%Y")}</b>\n\n‚ú®–£—Ç—Ä–µ–Ω–Ω–∏–π: <b>{timings_in_arr_form[0]}</b>\n‚ú®–û–±–µ–¥–µ–Ω–Ω—ã–π: <b>{timings_in_arr_form[2]}</b>\n‚ú®–ü–æ—Å–ª–µ–æ–±–µ–¥–µ–Ω–Ω—ã–π: <b>{timings_in_arr_form[3]}</b>\n‚ú®–í–µ—á–µ—Ä–Ω–∏–∏: <b>{timings_in_arr_form[4]}</b>\n‚ú®–ù–æ—á–Ω–æ–π: <b>{timings_in_arr_form[5]}</b>\n'
    await bot.send_message(telega_id, msg, parse_mode="HTML")
    await bot.delete_message(telega_id, message_obj["message_id"])#—É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è


@dp.message_handler(content_types='text', state="*")
async def report_handler(message: types.Message, state: FSMContext):
    if message.text == '–í—Ä–µ–º–µ–Ω–∞ –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è':
        await state.finish()
        user_info = select_data("select*from user_timings inner join users USING(telega_id) where date = ? and telega_id=?", (dt.now().date(), message.chat.id, ))
        #fetch_timings_from_bd = select_data("select*from user_timings where telega_id=? and date=?", (message.chat.id, dt.now().date(), ))
        if user_info != []:
            #timings_in_arr_form = fetch_timings_from_bd[0][2]
            await send_all_timings(user_info[0][-4], message.chat.id, json.loads(user_info[0][2]), message)
        else:
            resp = requests.get(f"http://api.aladhan.com/v1/calendarByCity/{dt.now().date().year}/{dt.now().date().month}?city={user_info[0][9]}&country={user_info[0][8]}&method=14&school={user_info[0][10]}")

            di_d("delete from user_timings where telega_id = ?", (user_info[0][1],))
            await correct_timings_insertor(user_info[0][1], resp)
            await report_handler(message)
        

async def correct_timings_insertor(chat_id, outside_resp):
    #–ï–°–õ–ò –ß–¢–û –¢–£–¢ –î–û–ë–ê–í–ò–ú –ö–õ–ê–í–ò–ê–¢–£–†–£ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–û–¢–û–ú –î–õ–Ø –ß–¢–ï–ù–ò–Ø –•–ê–î–ò–°–û–í!!!
    timings_data = []
    timezone = outside_resp.json()['data'][0]['meta']['timezone']

    for z in outside_resp.json()['data']:
        times_arr = []
        for v in z['timings']:
            if v != 'Imsak' and v != 'Firstthird' and v != 'Sunset' and v != "Lastthird":
                times_for_nz = z['timings'][v]
                
                obj_times_for_nz = re.search(r'(\d\d)\:(\d\d)', times_for_nz)

                dt_obj = dt(dt.now().year, dt.now().month, dt.now().day, int(obj_times_for_nz[1]), int(obj_times_for_nz[2]))

                times_arr.append(dt_obj.strftime('%H:%M'))

        # –û–ë–†–ê–ë–û–¢–ö–ê –î–ê–¢–´ –í –ù–£–ñ–ù–´–ô –§–û–†–ú–ê–¢
        dt_str = z['date']['gregorian']['date']
        dt_str_conv = dt.strptime(dt_str, '%d-%m-%Y').date()

        # –°–û–ó–î–ê–ù–ò–ï –°–ü–ò–°–ö–ê –î–õ–Ø –ú–ê–°–°–ò–í–ê
        mem_tuple = (chat_id, json.dumps(times_arr), timezone, str(dt_str_conv), json.dumps(z['date']['hijri']['holidays']),)
        # –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–ü–ò–°–ö–ê –í –ú–ê–°–°–ò–í
        timings_data.append(mem_tuple)
        mem_tuple = ()

    insert_many("INSERT INTO user_timings(telega_id, timings, timezone, date, holidays) VALUES(?, ?, ?, ?, ?);", timings_data)
    print("Inserted")


async def noon_print(telega_id, mes, hds):
    try:
        rand_second_for_sleep = random.randint(1, 10)
        await asyncio.sleep(rand_second_for_sleep)#pered otpravkoi pust zasnet 
        if len(hds)>4096:
            for x in range(0, len(hds), 4096):
                #print(some_string[x:x+100])
                if x>0:
                    await bot.send_message(telega_id, f"{hds[x:x+4096]}")
                else:
                    await bot.send_message(telega_id, f"{mes}{' '*28}üåπüåπüåπ{' '*28}\n{hds[x:x+4096]}")
        else:
            await bot.send_message(telega_id, f"{mes}{' '*28}üåπüåπüåπ{' '*28}\n{hds}")
    except BotBlocked:
        print("Chto to ili kto to tebya zablochil!!!!!")
        await asyncio.sleep(1)

def hadis(namaz, arr):
    if namaz in arr:
        return select_data('select khadis from khadisy order by RANDOM() LIMIT 1')[0][0]
    else:
        return '–ú–∏—Ä –í–∞–º'

def schedule_creator(outside_timings):
    for z in outside_timings:
        t_a = json.loads(z[2])
        #t_a = ["21:04", "21:07", "21:10", "21:12", "21:15", "21:17", "21:20"]
        tz_moscow = pytz.timezone(z[3])
        delta_time = dt.now().hour-dt.now(tz_moscow).hour
        delta_minutes = z[-2]
        nz_times_names_arr = json.loads(z[-1])
        #hadis = select_data('select khadis from khadisy order by () LIMIT 1')[0][0]
        #nz_times_names = ["–£—Ç—Ä–µ–Ω–Ω–∏–π", "–û–±–µ–¥–µ–Ω–Ω—ã–π", "–ü–æ—Å–ª–µ–æ–±–µ–¥–µ–Ω–Ω—ã–π", "–í–µ—á–µ—Ä–Ω–∏–π", "–ù–æ—á–Ω–æ–π"]
        if delta_minutes == 0:
            for x in t_a:
                obj_times_for_nz = re.search(r'(\d\d)\:(\d\d)', x)
                dt_obj = dt(dt.now().year, dt.now().month, dt.now().day, int(obj_times_for_nz[1]), int(obj_times_for_nz[2]))
                d = dt_obj + timedelta(hours=delta_time, minutes=delta_minutes)
                if t_a.index(x) == 0:
                    aioschedule.every().day.at(d.strftime('%H:%M')).do(noon_print, z[1], f"üïå –ü—Ä–æ—á–∏—Ç–∞–π –§–∞–¥–∂—Ä (–£—Ç—Ä–µ–Ω–Ω–∏–π)!üïå\n–û–∫–æ–Ω—á–∞–Ω–∏–µ –≤ {t_a[1]}\n\n", hadis("–£—Ç—Ä–µ–Ω–Ω–∏–π", nz_times_names_arr))
                elif t_a.index(x) == 2:
                    aioschedule.every().day.at(d.strftime('%H:%M')).do(noon_print, z[1], f"üïå –ü—Ä–æ—á–∏—Ç–∞–π –ó—É—Ö—Ä (–û–±–µ–¥–µ–Ω–Ω—ã–π)!üïå\n–û–∫–æ–Ω—á–∞–Ω–∏–µ –≤ {t_a[3]}\n\n", hadis("–û–±–µ–¥–µ–Ω–Ω—ã–π", nz_times_names_arr))
                elif t_a.index(x) == 3:
                    aioschedule.every().day.at(d.strftime('%H:%M')).do(noon_print, z[1], f"üïå –ü—Ä–æ—á–∏—Ç–∞–π –ê—Å—Ä (–ü–æ—Å–ª–µ–æ–±–µ–¥–µ–Ω–Ω—ã–π)!üïå\n–û–∫–æ–Ω—á–∞–Ω–∏–µ –≤ {t_a[4]}\n\n", hadis("–ü–æ—Å–ª–µ–æ–±–µ–¥–µ–Ω–Ω—ã–π", nz_times_names_arr))
                elif t_a.index(x) == 4:
                    aioschedule.every().day.at(d.strftime('%H:%M')).do(noon_print, z[1], f"üïå –ü—Ä–æ—á–∏—Ç–∞–π –ú–∞–≥—Ä–∏–± (–í–µ—á–µ—Ä–Ω–∏–∏)!üïå\n–û–∫–æ–Ω—á–∞–Ω–∏–µ –≤ {t_a[5]}\n\n", hadis("–í–µ—á–µ—Ä–Ω–∏–π", nz_times_names_arr))
                elif t_a.index(x) == 5:
                    aioschedule.every().day.at(d.strftime('%H:%M')).do(noon_print, z[1], f"üïå –ü—Ä–æ—á–∏—Ç–∞–π –ò—à–∞ (–ù–æ—á–Ω–æ–π)!üïå\n–û–∫–æ–Ω—á–∞–Ω–∏–µ –≤ {t_a[0]}\n\n", hadis("–ù–æ—á–Ω–æ–π", nz_times_names_arr))
        elif delta_minutes == -60:
            for x in t_a:
                obj_times_for_nz = re.search(r'(\d\d)\:(\d\d)', x)
                dt_obj = dt(dt.now().year, dt.now().month, dt.now().day, int(obj_times_for_nz[1]), int(obj_times_for_nz[2]))
                d = dt_obj + timedelta(hours=delta_time, minutes=delta_minutes)
                if t_a.index(x) == 1:
                    aioschedule.every().day.at(d.strftime('%H:%M')).do(noon_print, z[1], f"üïå –ß–µ—Ä–µ–∑ 60 –º–∏–Ω—É—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–º–∞–∑–∞ –§–∞–¥–∂—Ä (–£—Ç—Ä–µ–Ω–∏–∏)!üïå\n–û–∫–æ–Ω—á–∞–Ω–∏–µ –≤ {t_a[1]}\n\n", hadis("–£—Ç—Ä–µ–Ω–Ω–∏–π", nz_times_names_arr))
                elif t_a.index(x) == 3:
                    aioschedule.every().day.at(d.strftime('%H:%M')).do(noon_print, z[1], f"üïå –ß–µ—Ä–µ–∑ 60 –º–∏–Ω—É—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–º–∞–∑–∞ –ó—É—Ö—Ä (–û–±–µ–¥–µ–Ω–Ω—ã–π)!üïå\n–û–∫–æ–Ω—á–∞–Ω–∏–µ –≤ {t_a[3]}\n\n", hadis("–û–±–µ–¥–µ–Ω–Ω—ã–π", nz_times_names_arr))
                elif t_a.index(x) == 4:
                    aioschedule.every().day.at(d.strftime('%H:%M')).do(noon_print, z[1], f"üïå –ß–µ—Ä–µ–∑ 60 –º–∏–Ω—É—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–º–∞–∑–∞ –ê—Å—Ä (–ü–æ—Å–ª–µ–æ–±–µ–¥–µ–Ω–Ω—ã–π)!üïå\n–û–∫–æ–Ω—á–∞–Ω–∏–µ –≤ {t_a[4]}\n\n", hadis("–ü–æ—Å–ª–µ–æ–±–µ–¥–µ–Ω–Ω—ã–π", nz_times_names_arr))
                elif t_a.index(x) == 5:
                    aioschedule.every().day.at(d.strftime('%H:%M')).do(noon_print, z[1], f"üïå –ß–µ—Ä–µ–∑ 60 –º–∏–Ω—É—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–º–∞–∑–∞ –ú–∞–≥—Ä–∏–± (–í–µ—á–µ—Ä–Ω–∏–π)!üïå\n–û–∫–æ–Ω—á–∞–Ω–∏–µ –≤ {t_a[5]}\n–ù–æ—á–Ω–æ–π –Ω–∞–º–∞–∑ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤ {t_a[0]}\n\n", hadis("–í–µ—á–µ—Ä–Ω–∏–π", nz_times_names_arr))
                elif t_a.index(x) == 6:
                    aioschedule.every().day.at(d.strftime('%H:%M')).do(noon_print, z[1], "üïå –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ò—à–∞ (–ù–æ—á–Ω–æ–π), –µ—Å–ª–∏ –í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–ª–∏. üïå\n\n", hadis("–ù–æ—á–Ω–æ–π", nz_times_names_arr))
        elif delta_minutes == -30:
            for x in t_a:
                obj_times_for_nz = re.search(r'(\d\d)\:(\d\d)', x)
                dt_obj = dt(dt.now().year, dt.now().month, dt.now().day, int(obj_times_for_nz[1]), int(obj_times_for_nz[2]))
                d = dt_obj + timedelta(hours=delta_time, minutes=delta_minutes)
                if t_a.index(x) == 1:
                    aioschedule.every().day.at(d.strftime('%H:%M')).do(noon_print, z[1], f"üïå –ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–º–∞–∑–∞ –§–∞–¥–∂—Ä (–£—Ç—Ä–µ–Ω–∏–∏)!üïå\n–û–∫–æ–Ω—á–∞–Ω–∏–µ –≤ {t_a[1]}\n\n", hadis("–£—Ç—Ä–µ–Ω–Ω–∏–π", nz_times_names_arr))
                elif t_a.index(x) == 3:
                    aioschedule.every().day.at(d.strftime('%H:%M')).do(noon_print, z[1], f"üïå –ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–º–∞–∑–∞ –ó—É—Ö—Ä (–û–±–µ–¥–µ–Ω–Ω—ã–π)!üïå\n–û–∫–æ–Ω—á–∞–Ω–∏–µ –≤ {t_a[3]}\n\n", hadis("–û–±–µ–¥–µ–Ω–Ω—ã–π", nz_times_names_arr))
                elif t_a.index(x) == 4:
                    aioschedule.every().day.at(d.strftime('%H:%M')).do(noon_print, z[1], f"üïå –ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–º–∞–∑–∞ –ê—Å—Ä (–ü–æ—Å–ª–µ–æ–±–µ–¥–µ–Ω–Ω—ã–π)!üïå\n–û–∫–æ–Ω—á–∞–Ω–∏–µ –≤ {t_a[4]}\n\n", hadis("–ü–æ—Å–ª–µ–æ–±–µ–¥–µ–Ω–Ω—ã–π", nz_times_names_arr))
                elif t_a.index(x) == 5:
                    aioschedule.every().day.at(d.strftime('%H:%M')).do(noon_print, z[1], f"üïå –ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞–º–∞–∑–∞ –ú–∞–≥—Ä–∏–± (–í–µ—á–µ—Ä–Ω–∏–π)!üïå\n–û–∫–æ–Ω—á–∞–Ω–∏–µ –≤ {t_a[5]}\n–ù–æ—á–Ω–æ–π –Ω–∞–º–∞–∑ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤ {t_a[0]}\n\n", hadis("–í–µ—á–µ—Ä–Ω–∏–π", nz_times_names_arr))
                elif t_a.index(x) == 6:
                    aioschedule.every().day.at(d.strftime('%H:%M')).do(noon_print, z[1], "üïå –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ò—à–∞ (–ù–æ—á–Ω–æ–π), –µ—Å–ª–∏ –í—ã –µ—â–µ –Ω–µ –ø—Ä–æ—á–∏—Ç–∞–ª–∏. üïå\n\n", hadis("–ù–æ—á–Ω–æ–π", nz_times_names_arr))
            




async def timings_from_bd():
    aioschedule.clear()
    timings = select_data("select*from user_timings inner join users USING(telega_id) where date = ?", (dt.now().date(),))
    users = select_data("select*from users")
    if len(users)>len(timings):
        for x in timings:  #prohod po zapisyam v timingah prinadlejashim useram
            for j in users: #prohod po useram, ih bolshe, potomu probegaem po nim 
                if x[1]==j[1]: #esli user sovpadaet s zapisu v taimingah ego iz spiska udalaem
                    users.remove(j)
        for z in users: 
            di_d("delete from user_timings where telega_id = ?", (z[1],))
            resp = requests.get(f"http://api.aladhan.com/v1/calendarByCity/{dt.now().date().year}/{dt.now().date().month}?city={z[4]}&country={z[3]}&method=14&school={z[5]}")
            await correct_timings_insertor(z[1], resp)
            await asyncio.sleep(3)
            #await timings_from_bd() #vot eto zachem?
    if timings !=[]:
        schedule_creator(timings)
    aioschedule.every(3).minutes.do(timings_from_bd)
        



async def scheduler():
    aioschedule.every(3).minutes.do(timings_from_bd)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)


async def on_strtp(_):
    asyncio.create_task(scheduler())


if __name__ == '__main__':

    executor.start_polling(
        dispatcher=dp,
        skip_updates=True,
        on_startup=on_strtp
    )

# https://aiogram.ru/?p=33 - —Å—Å—ã–ª—å –Ω–∞ –∫–Ω–æ–ø–∫–∏
